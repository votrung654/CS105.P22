import * as THREE from 'three';
import { PointerLockControls } from 'three/addons/controls/PointerLockControls.js';

export default class PlayerControls {
    constructor(camera, domElement, scene) {
        this.camera = camera;
        this.domElement = domElement;
        this.scene = scene;
        this.room = null; 
        this.controls = new PointerLockControls(this.camera, this.domElement);
        
        // Movement states
        this.moveForward = false;
        this.moveBackward = false;
        this.moveLeft = false;
        this.moveRight = false;
        this.isPaused = false;

        // Movement properties
        this.velocity = new THREE.Vector3();
        this.direction = new THREE.Vector3();
        this.speed = 5.0;
        this.mouseSensitivity = 0.8;
        
        // Smooth movement
        this.acceleration = 25.0;
        this.friction = 12.0;
        this.maxSpeed = 7.0;
        
        // Collision detection
        this.collidableObjects = [];
        this.artifactObjects = [];
        this.playerRadius = 1.0;
        this.raycastDistance = 1.5;
        
        // üîß S·ª¨A L·ªñI: Mouse movement v·ªõi xoay 360¬∞ ngang
        this.mouseDelta = new THREE.Vector2();
        this.mouseSpeed = 0.002; // TƒÉng ƒë·ªô nh·∫°y tr·ªü l·∫°i
        
        // üéØ CH·ªà GI·ªöI H·∫†N G√ìC PITCH (l√™n/xu·ªëng)
        this.pitchLimit = Math.PI / 3; // 60 ƒë·ªô l√™n/xu·ªëng
        this.currentPitch = 0;
        this.minPitch = -this.pitchLimit;
        this.maxPitch = this.pitchLimit;
        
        // üåü CHO PH√âP XOAY 360¬∞ NGANG (YAW)
        this.allowFullYawRotation = true; // Cho ph√©p xoay to√†n ph·∫ßn tr√°i/ph·∫£i
        this.yawSpeed = 1.0; // T·ªëc ƒë·ªô xoay ngang
        
        this.setupEventListeners();
        this.setupMouseMovement();
    }

    setCollidableObjects(objects) {
        this.collidableObjects = objects;
    }
    
    setArtifactObjects(artifacts) {
        this.artifactObjects = artifacts;
    }
    
    setSpeed(speed) {
        this.speed = speed;
        this.maxSpeed = speed * 1.4;
    }
    
    setSensitivity(sensitivity) {
        this.mouseSensitivity = sensitivity;
        this.mouseSpeed = 0.002 * sensitivity;
        this.yawSpeed = 1.0 * sensitivity;
    }
    setRoom(room) {
        this.room = room;
    }
    pauseMovement(pause) {
        this.isPaused = pause;
        if (pause) {
            this.velocity.set(0, 0, 0);
            this.moveForward = this.moveBackward = this.moveLeft = this.moveRight = false;
        }
    }

    isLocked() {
        return this.controls.isLocked;
    }

    setupEventListeners() {
        this.domElement.addEventListener('click', () => {
            if (!this.isPaused) this.controls.lock();
        });

        this.controls.addEventListener('lock', () => {
            console.log('üéÆ Controls locked');
            this.domElement.style.cursor = 'none';
        });
        
        this.controls.addEventListener('unlock', () => {
            console.log('üéÆ Controls unlocked');
            this.domElement.style.cursor = 'default';
            this.moveForward = this.moveBackward = this.moveLeft = this.moveRight = false;
            this.velocity.set(0, 0, 0);
        });

        document.addEventListener('keydown', (event) => this.onKeyDown(event));
        document.addEventListener('keyup', (event) => this.onKeyUp(event));
        
        this.domElement.addEventListener('contextmenu', (event) => {
            event.preventDefault();
        });
    }
    
    // üåü S·ª¨A L·ªñI: Cho ph√©p xoay 360¬∞ ngang, ch·ªâ gi·ªõi h·∫°n pitch
    setupMouseMovement() {
        document.addEventListener('mousemove', (event) => {
            if (!this.controls.isLocked || this.isPaused) return;
            
            const movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;
            const movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;
            
            // üåü HORIZONTAL ROTATION (YAW) - CHO PH√âP XOAY TO√ÄN PH·∫¶N
            const deltaX = movementX * this.mouseSpeed * this.yawSpeed;
            this.camera.rotation.y -= deltaX; // Kh√¥ng gi·ªõi h·∫°n g√≥c Y
            
            // üéØ VERTICAL ROTATION (PITCH) - CH·ªà GI·ªöI H·∫†N PITCH
            const deltaY = movementY * this.mouseSpeed;
            this.currentPitch -= deltaY;
            
            // Ch·ªâ gi·ªõi h·∫°n pitch (g√≥c l√™n/xu·ªëng)
            this.currentPitch = Math.max(this.minPitch, Math.min(this.maxPitch, this.currentPitch));
            this.camera.rotation.x = this.currentPitch;
            
            // üîí ƒê·∫£m b·∫£o kh√¥ng xoay tr·ª•c Z
            this.camera.rotation.z = 0;
        });
    }

    // üîß S·ª¨A L·ªñI: ƒê·ªïi ng∆∞·ª£c h∆∞·ªõng A/D
    onKeyDown(event) {
        if (this.isPaused) return;
        
        switch (event.code) {
            case 'KeyW': // W = ti·∫øn l√™n
            case 'ArrowUp':
                this.moveForward = true;
                break;
            case 'KeyA': // üîß S·ª¨A: A = sang PH·∫¢I (ƒë·ªïi ng∆∞·ª£c)
            case 'ArrowLeft':
                this.moveRight = true; // ƒê·ªïi th√†nh moveRight
                break;
            case 'KeyS': // S = l√πi v·ªÅ
            case 'ArrowDown':
                this.moveBackward = true;
                break;
            case 'KeyD': // üîß S·ª¨A: D = sang TR√ÅI (ƒë·ªïi ng∆∞·ª£c)
            case 'ArrowRight':
                this.moveLeft = true; // ƒê·ªïi th√†nh moveLeft
                break;
            case 'KeyE': // üö™ Ph√≠m E ƒë·ªÉ ƒëi qua c·ª≠a
                this.activateDoor();
                break;
    
            case 'ShiftLeft':
            case 'ShiftRight':
                this.maxSpeed = this.speed * 2.0; // Sprint
                break;
        }
        
        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.code)) {
            event.preventDefault();
        }
    }
    // üö™ K√≠ch ho·∫°t c·ª≠a
    activateDoor() {
        if (this.room) {
            this.room.activateNearestDoor(this.camera);
        }
    }
    // üîß S·ª¨A L·ªñI: ƒê·ªïi ng∆∞·ª£c h∆∞·ªõng A/D cho keyUp
    onKeyUp(event) {
        if (this.isPaused) return;
        
        switch (event.code) {
            case 'KeyW':
            case 'ArrowUp':
                this.moveForward = false;
                break;
            case 'KeyA': // üîß S·ª¨A: A = moveRight (ƒë·ªïi ng∆∞·ª£c)
            case 'ArrowLeft':
                this.moveRight = false; // ƒê·ªïi th√†nh moveRight
                break;
            case 'KeyS':
            case 'ArrowDown':
                this.moveBackward = false;
                break;
            case 'KeyD': // üîß S·ª¨A: D = moveLeft (ƒë·ªïi ng∆∞·ª£c)
            case 'ArrowRight':
                this.moveLeft = false; // ƒê·ªïi th√†nh moveLeft
                break;
            case 'ShiftLeft':
            case 'ShiftRight':
                this.maxSpeed = this.speed * 1.4; // End sprint
                break;
        }
    }
    
    // C·∫£i thi·ªán collision detection
    checkCollisionWithObjects(position, direction, distance, objects) {
        const raycaster = new THREE.Raycaster();
        
        // Ki·ªÉm tra t·ª´ nhi·ªÅu ƒëi·ªÉm xung quanh player
        const checkPoints = [
            position.clone(), // Trung t√¢m
            position.clone().add(new THREE.Vector3(this.playerRadius * 0.8, 0, 0)), // Ph·∫£i
            position.clone().add(new THREE.Vector3(-this.playerRadius * 0.8, 0, 0)), // Tr√°i
            position.clone().add(new THREE.Vector3(0, 0, this.playerRadius * 0.8)), // Tr∆∞·ªõc
            position.clone().add(new THREE.Vector3(0, 0, -this.playerRadius * 0.8)), // Sau
            // Th√™m c√°c g√≥c
            position.clone().add(new THREE.Vector3(this.playerRadius * 0.6, 0, this.playerRadius * 0.6)),
            position.clone().add(new THREE.Vector3(-this.playerRadius * 0.6, 0, this.playerRadius * 0.6)),
            position.clone().add(new THREE.Vector3(this.playerRadius * 0.6, 0, -this.playerRadius * 0.6)),
            position.clone().add(new THREE.Vector3(-this.playerRadius * 0.6, 0, -this.playerRadius * 0.6)),
        ];
        
        for (let point of checkPoints) {
            raycaster.set(point, direction.normalize());
            const intersects = raycaster.intersectObjects(objects, true);
            
            if (intersects.length > 0 && intersects[0].distance < distance) {
                return true;
            }
        }
        
        return false;
    }
    
    checkWallCollision(newPosition) {
        // Room bounds
        const roomBounds = {
            minX: -19,
            maxX: 19,
            minZ: -29,
            maxZ: 29
        };
        
        const buffer = this.playerRadius;
        
        return (newPosition.x < roomBounds.minX + buffer || 
                newPosition.x > roomBounds.maxX - buffer ||
                newPosition.z < roomBounds.minZ + buffer || 
                newPosition.z > roomBounds.maxZ - buffer);
    }
    
    checkArtifactCollision(newPosition, direction) {
        if (this.artifactObjects.length === 0) return false;
        
        return this.checkCollisionWithObjects(
            newPosition, 
            direction, 
            this.raycastDistance, 
            this.artifactObjects
        );
    }

    update(delta) {
        if (!this.controls.isLocked || this.isPaused) {
            return;
        }
        if (this.room) {
            this.room.checkDoorsInteraction(this.camera.position);
        }
        // üîß S·ª¨A L·ªñI: T√≠nh to√°n h∆∞·ªõng di chuy·ªÉn ƒê√öNG v·ªõi A/D ƒë√£ ƒë·ªïi
        this.direction.z = Number(this.moveForward) - Number(this.moveBackward);
        this.direction.x = Number(this.moveRight) - Number(this.moveLeft); // ƒê√£ ƒë·ªïi ng∆∞·ª£c
        this.direction.normalize();

        // Apply acceleration/deceleration
        const targetVelocity = new THREE.Vector3();
        
        if (this.direction.length() > 0) {
            // Get camera direction vectors
            const forward = new THREE.Vector3();
            this.camera.getWorldDirection(forward);
            forward.y = 0;
            forward.normalize();
            
            const right = new THREE.Vector3();
            right.crossVectors(this.camera.up, forward).normalize();
            
            // üéØ ƒê√öNG H∆Ø·ªöNG: Calculate target velocity
            targetVelocity.addScaledVector(forward, this.direction.z);  // W/S
            targetVelocity.addScaledVector(right, this.direction.x);    // A/D (ƒë√£ ƒë·ªïi)
            targetVelocity.normalize();
            targetVelocity.multiplyScalar(this.speed);
        }
        
        // Smooth movement
        const accelerationFactor = this.direction.length() > 0 ? this.acceleration : this.friction;
        this.velocity.lerp(targetVelocity, accelerationFactor * delta);
        
        // Clamp speed
        if (this.velocity.length() > this.maxSpeed) {
            this.velocity.normalize().multiplyScalar(this.maxSpeed);
        }
        
        // Calculate movement delta
        const deltaMovement = this.velocity.clone().multiplyScalar(delta);
        
        // Ki·ªÉm tra collision cho t·ª´ng tr·ª•c ri√™ng bi·ªát
        let canMoveX = true;
        let canMoveZ = true;
        
        // Test X movement
        const testPositionX = this.camera.position.clone();
        testPositionX.x += deltaMovement.x;
        
        const xDirection = new THREE.Vector3(Math.sign(deltaMovement.x), 0, 0);
        
        if (this.checkWallCollision(testPositionX) || 
            this.checkCollisionWithObjects(this.camera.position, xDirection, this.raycastDistance, this.collidableObjects) ||
            this.checkArtifactCollision(testPositionX, xDirection)) {
            canMoveX = false;
            this.velocity.x = 0;
        }
        
        // Test Z movement
        const testPositionZ = this.camera.position.clone();
        testPositionZ.z += deltaMovement.z;
        
        const zDirection = new THREE.Vector3(0, 0, Math.sign(deltaMovement.z));
        
        if (this.checkWallCollision(testPositionZ) || 
            this.checkCollisionWithObjects(this.camera.position, zDirection, this.raycastDistance, this.collidableObjects) ||
            this.checkArtifactCollision(testPositionZ, zDirection)) {
            canMoveZ = false;
            this.velocity.z = 0;
        }
        
        // Apply movement
        if (canMoveX) {
            this.camera.position.x = testPositionX.x;
        }
        if (canMoveZ) {
            this.camera.position.z = testPositionZ.z;
        }
        
        // üîí Lu√¥n gi·ªØ camera ·ªü ƒë·ªô cao c·ªë ƒë·ªãnh
        this.camera.position.y = 1.7;
        
        // üéØ CH·ªà CONSTRAIN PITCH, KH√îNG CONSTRAIN YAW
        this.constrainRotation();
    }
    
    // üîß Reset g√≥c nh√¨n v·ªÅ ph√≠a tr∆∞·ªõc
    resetRotation() {
        this.camera.rotation.set(0, 0, 0);
        this.currentPitch = 0;
    }
    
    // üîß CH·ªà gi·ªõi h·∫°n pitch, cho ph√©p yaw xoay t·ª± do
    constrainRotation() {
        // CH·ªà gi·ªõi h·∫°n pitch (g√≥c l√™n/xu·ªëng)
        this.currentPitch = Math.max(this.minPitch, Math.min(this.maxPitch, this.currentPitch));
        this.camera.rotation.x = this.currentPitch;
        
        // KH√îNG gi·ªõi h·∫°n Y rotation (cho ph√©p xoay 360¬∞)
        // this.camera.rotation.y c√≥ th·ªÉ l√† b·∫•t k·ª≥ gi√° tr·ªã n√†o
        
        // Lu√¥n gi·ªØ Z rotation = 0
        this.camera.rotation.z = 0;
    }
    
    // üåü Th√™m method ƒë·ªÉ get g√≥c yaw hi·ªán t·∫°i
    getCurrentYaw() {
        return this.camera.rotation.y;
    }
    
    // üåü Th√™m method ƒë·ªÉ get g√≥c pitch hi·ªán t·∫°i
    getCurrentPitch() {
        return this.currentPitch;
    }
    
    // üåü Th√™m method ƒë·ªÉ set g√≥c yaw
    setYaw(yaw) {
        this.camera.rotation.y = yaw;
    }
    
    // üåü Th√™m method ƒë·ªÉ set g√≥c pitch
    setPitch(pitch) {
        this.currentPitch = Math.max(this.minPitch, Math.min(this.maxPitch, pitch));
        this.camera.rotation.x = this.currentPitch;
    }
    
    getCurrentSpeed() {
        return this.velocity.length();
    }
    
    getPosition() {
        return this.camera.position.clone();
    }
    
    setPosition(x, y, z) {
        this.camera.position.set(x, y, z);
        this.velocity.set(0, 0, 0);
    }
    
    lookAt(target) {
        // T√≠nh to√°n g√≥c yaw v√† pitch ƒë·ªÉ nh√¨n v·ªÅ target
        const direction = new THREE.Vector3();
        direction.subVectors(target, this.camera.position).normalize();
        
        // T√≠nh yaw (xoay tr√°i/ph·∫£i)
        const yaw = Math.atan2(direction.x, direction.z);
        this.camera.rotation.y = yaw;
        
        // T√≠nh pitch (xoay l√™n/xu·ªëng) v·ªõi gi·ªõi h·∫°n
        const distance = Math.sqrt(direction.x * direction.x + direction.z * direction.z);
        const pitch = Math.atan2(-direction.y, distance);
        this.currentPitch = Math.max(this.minPitch, Math.min(this.maxPitch, pitch));
        this.camera.rotation.x = this.currentPitch;
        
        // ƒê·∫£m b·∫£o Z rotation = 0
        this.camera.rotation.z = 0;
    }
}